// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/auth.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AuthSignupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthSignupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthSignupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthSignupRequestMultiError, or nil if none found.
func (m *AuthSignupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthSignupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		err := AuthSignupRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthSignupRequestMultiError(errors)
	}

	return nil
}

// AuthSignupRequestMultiError is an error wrapping multiple validation errors
// returned by AuthSignupRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthSignupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthSignupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthSignupRequestMultiError) AllErrors() []error { return m }

// AuthSignupRequestValidationError is the validation error returned by
// AuthSignupRequest.Validate if the designated constraints aren't met.
type AuthSignupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthSignupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthSignupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthSignupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthSignupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthSignupRequestValidationError) ErrorName() string {
	return "AuthSignupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthSignupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthSignupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthSignupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthSignupRequestValidationError{}

// Validate checks the field values on AuthSignupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthSignupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthSignupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthSignupResponseMultiError, or nil if none found.
func (m *AuthSignupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthSignupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return AuthSignupResponseMultiError(errors)
	}

	return nil
}

// AuthSignupResponseMultiError is an error wrapping multiple validation errors
// returned by AuthSignupResponse.ValidateAll() if the designated constraints
// aren't met.
type AuthSignupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthSignupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthSignupResponseMultiError) AllErrors() []error { return m }

// AuthSignupResponseValidationError is the validation error returned by
// AuthSignupResponse.Validate if the designated constraints aren't met.
type AuthSignupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthSignupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthSignupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthSignupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthSignupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthSignupResponseValidationError) ErrorName() string {
	return "AuthSignupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthSignupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthSignupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthSignupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthSignupResponseValidationError{}

// Validate checks the field values on AuthRefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthRefreshTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthRefreshTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthRefreshTokenRequestMultiError, or nil if none found.
func (m *AuthRefreshTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthRefreshTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRefreshToken()) < 1 {
		err := AuthRefreshTokenRequestValidationError{
			field:  "RefreshToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthRefreshTokenRequestMultiError(errors)
	}

	return nil
}

// AuthRefreshTokenRequestMultiError is an error wrapping multiple validation
// errors returned by AuthRefreshTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthRefreshTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthRefreshTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthRefreshTokenRequestMultiError) AllErrors() []error { return m }

// AuthRefreshTokenRequestValidationError is the validation error returned by
// AuthRefreshTokenRequest.Validate if the designated constraints aren't met.
type AuthRefreshTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthRefreshTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthRefreshTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthRefreshTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthRefreshTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthRefreshTokenRequestValidationError) ErrorName() string {
	return "AuthRefreshTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthRefreshTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthRefreshTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthRefreshTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthRefreshTokenRequestValidationError{}

// Validate checks the field values on AuthRefreshTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthRefreshTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthRefreshTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthRefreshTokenResponseMultiError, or nil if none found.
func (m *AuthRefreshTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthRefreshTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return AuthRefreshTokenResponseMultiError(errors)
	}

	return nil
}

// AuthRefreshTokenResponseMultiError is an error wrapping multiple validation
// errors returned by AuthRefreshTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthRefreshTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthRefreshTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthRefreshTokenResponseMultiError) AllErrors() []error { return m }

// AuthRefreshTokenResponseValidationError is the validation error returned by
// AuthRefreshTokenResponse.Validate if the designated constraints aren't met.
type AuthRefreshTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthRefreshTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthRefreshTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthRefreshTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthRefreshTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthRefreshTokenResponseValidationError) ErrorName() string {
	return "AuthRefreshTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthRefreshTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthRefreshTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthRefreshTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthRefreshTokenResponseValidationError{}
